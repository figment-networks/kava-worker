name: Deploy

on:
  push:
    branches: [ k8s-helm-kava-7 ]

env:
  EKS_NAMESPACE: indexers
  EKS_CLUSTER_NAME: prod
  HELM_DRIVER: configmap
  TESTVAR: ${{github.event.repository.name}}
  REGISTRY: 703336180274.dkr.ecr.ca-central-1.amazonaws.com

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: "Test"
        run: env

      - name: "Get repo name"
        run: echo "${{ github.event.repository.name }}"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Bump version and push tag
        id: tag-version
        uses: figment-networks/gh-tag-action@0.1.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_CLUSTER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_CLUSTER_AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1
          role-to-assume: ${{ secrets.PROD_CLUSTER_AWS_ROLE_TO_ASSUME }}
          role-external-id: ${{ secrets.PROD_CLUSTER_AWS_ROLE_EXTERNAL_ID }}
          role-duration-seconds: 900
          role-session-name: GithubActionsSession

      - name: Create ECR docker repository if needed
        run: |
          set -euo pipefail

          # Only take everything after the slash octocat/hello-world
          REPOSITORY=${GITHUB_REPOSITORY#*/}

          if ! aws ecr describe-repositories --repository-name="$REPOSITORY" > /dev/null 2>&1
          then
            echo "Creating $REPOSITORY"
            aws ecr create-repository --repository-name="$REPOSITORY"
          else
            echo "$REPOSITORY already exists"
          fi

      - name: Docker login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            703336180274.dkr.ecr.ca-central-1.amazonaws.com/${{github.event.repository.name}}:${{github.sha}}
            703336180274.dkr.ecr.ca-central-1.amazonaws.com/${{github.event.repository.name}}:${{ steps.tag-version.outputs.new-version }}
            703336180274.dkr.ecr.ca-central-1.amazonaws.com/${{github.event.repository.name}}:production
            703336180274.dkr.ecr.ca-central-1.amazonaws.com/${{github.event.repository.name}}:latest

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Setup kubeconfig
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME

      - name: Helm repository login
        run: |
          helm repo add figment-helm-repo https://raw.githubusercontent.com/figment-networks/helm/main/_repo \
          --username=${{ secrets.HELM_REPOSITORY_USERNAME }} \
          --password=${{ secrets.HELM_REPOSITORY_PASSWORD }}

      - name: Install helm diff
        run: helm plugin install https://github.com/databus23/helm-diff

      - name: Helm diff
        run: |
          set -euo pipefail

          IMAGE="703336180274.dkr.ecr.ca-central-1.amazonaws.com/${{github.event.repository.name}}:${{ steps.tag-version.outputs.new-version }}"

          for dir in ./helm/*
          do
            echo "Diffing [$dir] in namespace [$EKS_NAMESPACE]"

            helm dep up "$dir"

            helm diff --context=3 upgrade --allow-unreleased --namespace "$EKS_NAMESPACE" "$(basename "$dir")" "$dir" \
            --set global.image="$IMAGE"

          done

      - name: Deploy
        id: deploy
        run: |
          set -euo pipefail

          IMAGE="703336180274.dkr.ecr.ca-central-1.amazonaws.com/${{github.event.repository.name}}:${{ steps.tag-version.outputs.new-version }}"

          for dir in ./helm/*
          do
            echo "Deploying [$dir] to namespace [$EKS_NAMESPACE]"

            #helm dep up "$dir"

            helm upgrade --install --namespace "$EKS_NAMESPACE" "$(basename "$dir")" "$dir" \
            --set global.image="$IMAGE"

          done

      - name: Rollout status
        id: rollout_status
        if: steps.deploy.outcome == 'success'
        run: |
          set -euo pipefail

          for dir in ./helm/*
          do
            echo "Checking statuses of [$dir]"

            for resource in $(kubectl get deployment,statefulset -l chart="$(basename "$dir")" --output=name)
            do
              echo "Status [$resource]"

              kubectl rollout status --timeout=60s "$resource"
            done

          done

      - name: Kubernetes deployment failure debug information
        if: ${{ failure() && ((steps.deploy.outcome == 'failure') || (steps.rollout_status.outcome == 'failure')) }}
        run: |
          set -euo pipefail

          for dir in ./helm/*
          do
            kubectl describe pods -l chart="$(basename "$dir")"
            kubectl logs --tail 20 -l chart="$(basename "$dir")"
          done

          exit 1
